---
import { Code } from "astro:components";
import { Image } from "astro:assets";
import Terminal from "../Terminal.astro";
import TerminalIcon from "../icons/TerminalIcon.astro";
import StormIcon from "../icons/StormIcon.astro";
import WrenchIcon from "../icons/WrenchIcon.astro";
import applicationComposer from "../../images/application-composer.png";

const rustCodeExample = `async fn function_handler(
    event: LambdaEvent<EventBridgeEvent<Value>>,
) -> Result<(), Error> {
    let start = Instant::now();
    let resp = reqwest::get("https://loige.co").await;
    let duration = start.elapsed();

    let timestamp = event
        .payload
        .time
        .unwrap_or_else(chrono::Utc::now)
        .format("%+")
        .to_string();
    
    let mut item = HashMap::new();
    item.insert(
        "Id".to_string(),
        AttributeValue::S(format!("{}#{}", "https://loige.co", timestamp)),
    );
    item.insert("Timestamp".to_string(), AttributeValue::S(timestamp));

    let success = match resp {
        Ok(resp) => {
            let status = resp.status().as_u16();
            item.insert("Status".to_string(), AttributeValue::N(status.to_string()));
            item.insert(
                "Duration".to_string(),
                AttributeValue::N(duration.as_millis().to_string()),
            );
            resp.status().is_success()
        }
        Err(e) => {
            item.insert("Error".to_string(), AttributeValue::S(e.to_string()));
            false
        }
    };
    item.insert("Success".to_string(), AttributeValue::Bool(success));

    let insert_result = dynamodb_client
        .put_item()
        .table_name("my_dynamo_table")
        .set_item(Some(item))
        .send()
        .await?;

    tracing::info!("Insert result: {:?}", insert_result);

    Ok(())
}`;
---

<section
  id="features"
  class="mt-40 my-12 px-4 md:px-6 text-foreground flex flex-col justify-center align-middle gap-4 items-center scroll-m-28 scroll-smooth"
>
  <h2
    class="text-center text-2xl font-bold sm:text-3xl md:text-4xl lg:text-5xl/line-tight bg-gradient-to-tr from-primary-alt to-primary inline-block text-transparent bg-clip-text"
  >
    What will you get from this book?
  </h2>
  <p class="max-w-[600px] text-lg text-foreground">
    Are you looking to build <strong>efficient</strong> and <strong
      >sustainable</strong
    > AWS serverless solutions that won't break the bank? Wondering how the Rust
    programming language could help you achieve that? You've come to the right place!
    Check out this practical guide for all the tips and tricks you need to know to
    create cost-effective serverless solutions using AWS and Rust.
  </p>
</section>

<section class="my-12 text-foreground">
  <div
    class="bg-card/50 text-card-foreground border border-border rounded-md p-8"
  >
    <div class="grid grid-rows-1 grid-cols-1 lg:grid-cols-12 gap-8">
      <div class="col-span-1 lg:col-span-4">
        <TerminalIcon class="w-12 h-12 text-accent" />
        <h2 class="mt-4 text-xl font-bold">Hands-on code examples</h2>
        <p class="mt-1 max-w-96 text-foreground/90">
          Learn by doing with practical and realistic code examples that
          demonstrate how to write efficient and sustainable Lambda functions in
          Rust.
        </p>
      </div>

      <div class="col-span-1 lg:col-span-8">
        <Terminal title="handler.rs" class="flex-1 w-full">
          <Code
            class="p-2 text-xs lg:text-sm rounded-b-sm overflow-auto whitespace-pre-wrap max-h-[300px] lg:max-h-none"
            code={rustCodeExample}
            lang="rust"
            theme="aurora-x"
          />
        </Terminal>
      </div>
    </div>
  </div>
</section>

<section class="my-12 text-foreground">
  <div
    class="bg-card/50 text-card-foreground border border-border rounded-md p-8"
  >
    <div class="grid grid-rows-1 grid-cols-1 lg:grid-cols-12 gap-8">
      <div class="col-span-1 lg:col-span-4 lg:order-2">
        <StormIcon class="w-12 h-12 text-accent" />
        <h2 class="mt-4 text-xl font-bold">Design serverless architectures</h2>
        <p class="mt-1 max-w-96 text-foreground/90">
          It's not just about the Lambda functions! Learn how to design complete
          serverless architectures using AWS services like <strong
            >API Gateway</strong
          >, <strong>EventBridge</strong>, <strong>DynamoDB</strong>, and more
          using <strong>Infrastructure as Code</strong>.
        </p>
      </div>

      <div class="col-span-1 lg:col-span-8 lg:order-1">
        <Image
          src={applicationComposer}
          width={700}
          height={180}
          class="rounded-md w-full h-full object-cover"
          alt="A screenshot of Application Composer showcasing an API Gateway connected to multiple Lambda functions"
        />
      </div>
    </div>
  </div>
</section>

<section class="my-12 text-foreground">
  <div
    class="bg-card/50 text-card-foreground border border-border rounded-md p-8"
  >
    <div class="grid grid-rows-1 grid-cols-1 lg:grid-cols-12 gap-8">
      <div class="col-span-1 lg:col-span-4">
        <WrenchIcon class="w-12 h-12 text-accent" />
        <h2 class="mt-4 text-xl font-bold">The tools of the trade</h2>
        <p class="mt-1 max-w-96 text-foreground/90">
          Discover the best tools and practices to <strong>build</strong>, <strong
            >test</strong
          >, and <strong>deploy</strong>
          <strong>production-grade</strong> Lambda functions using Rust.
        </p>
      </div>

      <div class="col-span-1 lg:col-span-8 content-evenly">
        <Terminal title="~/my-awesome-rust-lambda">
          <Code
            class="p-2 text-md lg:text-xl rounded-b-sm overflow-auto whitespace-pre-wrap max-h-44"
            code={"$ cargo lambda build --release --arm64\n\n\n"}
            lang="bash"
            theme="aurora-x"
          />
        </Terminal>
      </div>
    </div>
  </div>
</section>
